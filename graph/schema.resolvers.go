package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"

	"github.com/AhmedEnnaime/GoQl/db"
	"github.com/AhmedEnnaime/GoQl/graph/model"
)

// CreateQuestion is the resolver for the createQuestion field.
func (r *mutationResolver) CreateQuestion(ctx context.Context, input model.QuestionInput) (*model.Question, error) {
	db := db.Model

	question := &model.Question{
		// ID:           fmt.Sprintf("T%d", rand.Int()),
		QuestionText: input.QuestionText,
		PubDate:      input.PubDate,
	}

	if err := db.Create(&question).Error; err != nil {
		return nil, err
	}

	r.questions = append(r.questions, question)
	return question, nil
}

// UpdateQuestion is the resolver for the updateQuestion field.
func (r *mutationResolver) UpdateQuestion(ctx context.Context, id *string, input model.UpdateQuestion) (*model.Question, error) {
	db := db.Model
	data := make(map[string]interface{})
	Question := &model.Question{}

	if input.PubDate != nil {
		data["pub_date"] = input.PubDate
	}

	if input.QuestionText != nil {
		data["question_text"] = input.QuestionText
	}

	if err := db.Model(&Question).Where("id = ?", *id).Updates(data).Error; err != nil {
		return nil, err
	}

	return Question, nil
}

// DeleteQuestion is the resolver for the deleteQuestion field.
func (r *mutationResolver) DeleteQuestion(ctx context.Context, id *string) (*model.Question, error) {
	db := db.Model
	Question := &model.Question{}

	result := db.Where("id = ?", *id).Delete(&Question)
	if result.Error != nil {
		return nil, result.Error
	}

	if result.RowsAffected == 0 {
		return nil, fmt.Errorf("no user with ID %s found", *id)
	}

	msg := fmt.Sprintf("User with ID %s has been deleted", *id)

	return Question, fmt.Errorf(msg)
}

// CreateChoice is the resolver for the createChoice field.
func (r *mutationResolver) CreateChoice(ctx context.Context, input *model.ChoiceInput) (*model.Choice, error) {
	panic(fmt.Errorf("not implemented: CreateChoice - createChoice"))
}

// Questions is the resolver for the questions field.
func (r *queryResolver) Questions(ctx context.Context) ([]*model.Question, error) {
	DEFAULT_LIMIT := 20
	question := []*model.Question{}

	db := db.Model

	if limit := ctx.Value("limit"); limit != nil {
		limit := int(limit.(int))
		DEFAULT_LIMIT = limit
	}

	if id := ctx.Value("id"); id != nil {
		id := int(id.(int))
		if err := db.First(&question, "id=?", id).Error; err != nil {
			return nil, err
		}
		return question, nil
	}

	if err := db.Limit(DEFAULT_LIMIT).Find(&question).Error; err != nil {
		return nil, err
	}

	return question, nil
}

// Choices is the resolver for the choices field.
func (r *queryResolver) Choices(ctx context.Context) ([]*model.Choice, error) {
	panic(fmt.Errorf("not implemented: Choices - choices"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
